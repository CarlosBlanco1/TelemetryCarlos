@page "/settings"
@using MauiTickets.Services
@using TicketLibrary.Services
@inject NavigationManager UriHelper
@inject ITicketService service
@* inject MauiTicketService ticketService *@

<h3>Settings</h3>

@* input to change online or offline *@

<InputRadioGroup Name="isOnline" @bind-Value="isOnline">
    <InputRadio Name="isOnline" Value="true" />
    Online
    <InputRadio Name="isOnline" Value="false" />
    Offline
</InputRadioGroup>

<br /><br />

@* dropdown to change sync frequency *@
Please input the frequency in seconds that you want the DBs to sync
<input type="number" @bind-value=sFrequency/>

<br />
<br />


@* input to set the api that the app pulls from *@
Please input the api that the data should pull from
<input type="text" @bind=setAPI />

<br />
<br />


@* submit button *@
<button @onclick="handleFormRequest">SUBMIT</button>

@if (errorMessage != "")
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (successMessage != "")
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

<button @onclick="resetTickets">Reset local Tickets</button>

@code {
    public bool isOnline = true;
    public int sFrequency = 15;
    public string setAPI = "https://blazortickets20240214165128.azurewebsites.net";
    public string errorMessage = "";
    public string successMessage = "";


    public async void handleFormRequest()
    {
        service.ChangeConnectivity(isOnline);
        await service.ChangeBaseAddress(setAPI);
        if (sFrequency > 0 && sFrequency < 1000000)
        { 
            //ticketService.SetTimer(sFrequency);
            UriHelper.NavigateTo($"mauiTicket/{sFrequency.ToString()}");
            errorMessage = "";
            successMessage = "Settings Saved Successfully";
        }
        else
        {
            successMessage = "";
            errorMessage = "Invalid frequency entered, please enter a number between 1 and 1,000,000";
        }

        //await service.ResetLocalTicketsDB();
    }


    public async Task resetTickets()
    {
        await service.ResetLocalTicketsDB();
    }
}
